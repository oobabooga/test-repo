name: Build CPU-only Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of text-generation-webui to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Override configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of text-generation-webui to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    env:
      ONFIGIN: ${{ inputs.config }}
      EXCLUDEIN: ${{ inputs.exclude }}

    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = @('ubuntu-22.04', 'windows-2019', 'macos-13')
              'pyver' = @("3.11")
              'avx' = @("AVX2")
              'cuda' = @("11.7", "12.4")
          }

          if ($env:CONFIGIN -ne 'Default') {$env:CONFIGIN.split(';').foreach({$matrix[$_.split(':')[0]] = $_.split(':')[1].split(',')})}

          if ($env:EXCLUDEIN -ne 'None') {
              $exclusions = @()
              $exclusions += $env:EXCLUDEIN.split(';').replace(':','=').replace(',',"`n") | ConvertFrom-StringData
              $matrix['exclude'] = $exclusions
          }

          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT

  build_wheels:
    name: ${{ matrix.os }} ${{ matrix.pyver }} CPU ${{ matrix.avx }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      AVXVER: ${{ matrix.avx }}
      PCKGVER: ${{ inputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'oobabooga/test-repo'
          ref: ${{ inputs.version }}
          submodules: 'recursive'

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}

      - name: Build Package
        shell: bash
        run: |
            rm -rf .github
            cd ..

            if [[ "$RUNNER_OS" == "Windows" ]]; then
              curl -L -o python-build.tar.gz https://github.com/astral-sh/python-build-standalone/releases/download/20250409/cpython-3.11.12+20250409-x86_64-pc-windows-msvc-install_only.tar.gz
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              # macos-13 is Intel, macos-14/15/latest are ARM
              if [[ "${{ matrix.os }}" == "macos-13" ]]; then
                curl -L -o python-build.tar.gz https://github.com/astral-sh/python-build-standalone/releases/download/20250409/cpython-3.11.12+20250409-x86_64-apple-darwin-install_only.tar.gz
                ARCH="x86_64"
              else
                curl -L -o python-build.tar.gz https://github.com/astral-sh/python-build-standalone/releases/download/20250409/cpython-3.11.12+20250409-aarch64-apple-darwin-install_only.tar.gz
                ARCH="arm64"
              fi
            else
              # Linux case
              curl -L -o python-build.tar.gz https://github.com/astral-sh/python-build-standalone/releases/download/20250409/cpython-3.11.12+20250409-x86_64-unknown-linux-gnu-install_only.tar.gz
            fi

            tar -xzf python-build.tar.gz
            mv python test-repo/portable_env

            # Simplified ZIP naming
            if [[ "$RUNNER_OS" == "macOS" ]]; then
              ZIP_NAME="test-repo-${{ inputs.version }}-${{ matrix.os }}-$ARCH.zip"
            else
              ZIP_NAME="test-repo-${{ inputs.version }}-${{ matrix.os }}.zip"
            fi

            if [[ "$RUNNER_OS" == "Windows" ]]; then
              powershell -Command "Compress-Archive -Path test-repo -DestinationPath $ZIP_NAME"
            else
              zip -r $ZIP_NAME test-repo
            fi

      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ../test-repo-${{ inputs.version }}-${{ matrix.os }}-python${{ matrix.pyver }}-${{ matrix.avx }}.zip
          tag: ${{ inputs.version }}
          file_glob: true
          make_latest: false
          overwrite: true
